// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.9.0.

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import '../frb_generated.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';
import 'package:freezed_annotation/freezed_annotation.dart' hide protected;
part 'types.freezed.dart';

            // These types are ignored because they are neither used by any `pub` functions nor (for structs and enums) marked `#[frb(unignore)]`: `TransactionKind`
// These function are ignored because they are on traits that is not defined in current crate (put an empty `#[frb]` on it to unignore): `assert_receiver_is_total_eq`, `assert_receiver_is_total_eq`, `assert_receiver_is_total_eq`, `assert_receiver_is_total_eq`, `assert_receiver_is_total_eq`, `assert_receiver_is_total_eq`, `clone`, `clone`, `clone`, `clone`, `clone`, `clone`, `clone`, `clone`, `clone`, `clone`, `clone`, `clone`, `clone`, `eq`, `eq`, `eq`, `eq`, `eq`, `eq`, `eq`, `eq`, `eq`, `eq`, `eq`, `eq`, `eq`, `fmt`, `fmt`, `fmt`, `fmt`, `fmt`, `fmt`, `fmt`, `fmt`, `fmt`, `fmt`, `fmt`, `fmt`, `fmt`
// These functions are ignored (category: IgnoreBecauseNotAllowedOwner): `default`, `default`, `default`, `default`, `default`, `default`


            

            class CashuTransaction  {
                final String id;
final TransactionStatus status;
final TransactionDirection io;
final String? info;
final BigInt time;
final BigInt amount;
final String mint;
final String token;
final String? unit;

                const CashuTransaction({required this.id ,required this.status ,required this.io ,this.info ,required this.time ,required this.amount ,required this.mint ,required this.token ,this.unit ,});

                
                

                
        @override
        int get hashCode => id.hashCode^status.hashCode^io.hashCode^info.hashCode^time.hashCode^amount.hashCode^mint.hashCode^token.hashCode^unit.hashCode;
        

                
        @override
        bool operator ==(Object other) =>
            identical(this, other) ||
            other is CashuTransaction &&
                runtimeType == other.runtimeType
                && id == other.id&& status == other.status&& io == other.io&& info == other.info&& time == other.time&& amount == other.amount&& mint == other.mint&& token == other.token&& unit == other.unit;
        
            }

class Contact  {
                final String method;
final String info;

                const Contact({required this.method ,required this.info ,});

                
                

                
        @override
        int get hashCode => method.hashCode^info.hashCode;
        

                
        @override
        bool operator ==(Object other) =>
            identical(this, other) ||
            other is Contact &&
                runtimeType == other.runtimeType
                && method == other.method&& info == other.info;
        
            }

class LNTransaction  {
                final TransactionStatus status;
final TransactionDirection io;
final String? info;
final BigInt time;
final BigInt amount;
final BigInt? fee;
final String mint;
final String pr;
final String hash;
final String? unit;

                const LNTransaction({required this.status ,required this.io ,this.info ,required this.time ,required this.amount ,this.fee ,required this.mint ,required this.pr ,required this.hash ,this.unit ,});

                
                

                
        @override
        int get hashCode => status.hashCode^io.hashCode^info.hashCode^time.hashCode^amount.hashCode^fee.hashCode^mint.hashCode^pr.hashCode^hash.hashCode^unit.hashCode;
        

                
        @override
        bool operator ==(Object other) =>
            identical(this, other) ||
            other is LNTransaction &&
                runtimeType == other.runtimeType
                && status == other.status&& io == other.io&& info == other.info&& time == other.time&& amount == other.amount&& fee == other.fee&& mint == other.mint&& pr == other.pr&& hash == other.hash&& unit == other.unit;
        
            }

class Mint  {
                final String url;
final bool active;
final BigInt time;
final MintInfo? info;

                const Mint({required this.url ,required this.active ,required this.time ,this.info ,});

                
                

                
        @override
        int get hashCode => url.hashCode^active.hashCode^time.hashCode^info.hashCode;
        

                
        @override
        bool operator ==(Object other) =>
            identical(this, other) ||
            other is Mint &&
                runtimeType == other.runtimeType
                && url == other.url&& active == other.active&& time == other.time&& info == other.info;
        
            }

/// NUT-06: Mint information
class MintInfo  {
                final String name;
final String version;
final String? pubkey;
final String? description;
final String? descriptionLong;
final String? motd;
final List<Contact> contact;
final Nuts nuts;

                const MintInfo({required this.name ,required this.version ,this.pubkey ,this.description ,this.descriptionLong ,this.motd ,required this.contact ,required this.nuts ,});

                
                

                
        @override
        int get hashCode => name.hashCode^version.hashCode^pubkey.hashCode^description.hashCode^descriptionLong.hashCode^motd.hashCode^contact.hashCode^nuts.hashCode;
        

                
        @override
        bool operator ==(Object other) =>
            identical(this, other) ||
            other is MintInfo &&
                runtimeType == other.runtimeType
                && name == other.name&& version == other.version&& pubkey == other.pubkey&& description == other.description&& descriptionLong == other.descriptionLong&& motd == other.motd&& contact == other.contact&& nuts == other.nuts;
        
            }

class NutSupported  {
                final bool supported;

                const NutSupported({required this.supported ,});

                
                

                
        @override
        int get hashCode => supported.hashCode;
        

                
        @override
        bool operator ==(Object other) =>
            identical(this, other) ||
            other is NutSupported &&
                runtimeType == other.runtimeType
                && supported == other.supported;
        
            }

class Nuts  {
                final PaymentMethodSettings nut04;
final PaymentMethodSettings nut05;
final NutSupported nut07;
final NutSupported nut08;
final NutSupported nut09;
final NutSupported nut10;
final NutSupported nut11;
final NutSupported nut12;

                const Nuts({required this.nut04 ,required this.nut05 ,required this.nut07 ,required this.nut08 ,required this.nut09 ,required this.nut10 ,required this.nut11 ,required this.nut12 ,});

                
                

                
        @override
        int get hashCode => nut04.hashCode^nut05.hashCode^nut07.hashCode^nut08.hashCode^nut09.hashCode^nut10.hashCode^nut11.hashCode^nut12.hashCode;
        

                
        @override
        bool operator ==(Object other) =>
            identical(this, other) ||
            other is Nuts &&
                runtimeType == other.runtimeType
                && nut04 == other.nut04&& nut05 == other.nut05&& nut07 == other.nut07&& nut08 == other.nut08&& nut09 == other.nut09&& nut10 == other.nut10&& nut11 == other.nut11&& nut12 == other.nut12;
        
            }

class PaymentMethod  {
                final String method;
final String unit;
final PlatformInt64 minAmount;
final PlatformInt64 maxAmount;

                const PaymentMethod({required this.method ,required this.unit ,required this.minAmount ,required this.maxAmount ,});

                
                

                
        @override
        int get hashCode => method.hashCode^unit.hashCode^minAmount.hashCode^maxAmount.hashCode;
        

                
        @override
        bool operator ==(Object other) =>
            identical(this, other) ||
            other is PaymentMethod &&
                runtimeType == other.runtimeType
                && method == other.method&& unit == other.unit&& minAmount == other.minAmount&& maxAmount == other.maxAmount;
        
            }

class PaymentMethodSettings  {
                final List<PaymentMethod> methods;
final bool disabled;

                const PaymentMethodSettings({required this.methods ,required this.disabled ,});

                
                

                
        @override
        int get hashCode => methods.hashCode^disabled.hashCode;
        

                
        @override
        bool operator ==(Object other) =>
            identical(this, other) ||
            other is PaymentMethodSettings &&
                runtimeType == other.runtimeType
                && methods == other.methods&& disabled == other.disabled;
        
            }

@freezed
                sealed class Transaction with _$Transaction  {
                    const Transaction._();

                     const factory Transaction.cashu(  CashuTransaction field0,) = Transaction_Cashu;
 const factory Transaction.ln(  LNTransaction field0,) = Transaction_LN;

                    

                    
                }

enum TransactionDirection {
                    in_,
out,
                    ;
                    
                }

enum TransactionStatus {
                    pending,
success,
failed,
expired,
                    ;
                    
                }
            